TODO:
   ☐ 1、new
   ☐ 2、promise .all .race 并发三个
   ☐ 3、原型链 
   ✔ 4、lru @done(21-04-28 09:43)
   ☐ 5、alv
   ☐ 6、vue源码
   ☐ 7、event loop node和浏览器
   ☐ 8、http
   ☐ 9、babel
   ☐ 10、loader
   ☐ 11、plugin
   ☐ 12、extend
   ☐ 13、柯理化
   ☐ 14、tcp udp ssl
   ✔ 15、eventBus @done(21-04-28 11:02)
   ☐ 16、on 和 addEventListener 的区别
   ☐ 17、Etag 和 Last-modified 比较。
   ☐ 18、encodeURI 和 encodeURIComponent 的区别
   ☐ 19、commonJS 和 es6 模块化的区别
   ☐ 20、防抖和节流
   ☐ 21、快排、冒泡和排序
   ☐ 22、fetch原理 options
   ☐ 23、call apply bind
   ☐ 24、二进制加法https://segmentfault.com/a/1190000011317502
   ☐ 25、script 标签会阻塞解析吗？会，怎么异步加载？(async, defer)，有什么不同？(加载顺序)

   





✔ 1、正则学习 @important @started(19-04-06 11:25) @done(19-04-16 16:55) @lasted(1w3d5h30m48s)
✔ 2、柯里化函数 @high @done(19-04-03 21:06)
☐ 3、观察者模式、发布订阅模式 @high   
☐ 4、你不知道的js阅读 @high 

☐ 5、 proxy部分
   ✔ a.对apply可拦截情况的理解 @done(19-04-18 16:54)
   ☐ b.元编程的应用
   ☐ c.proxy的应用目的和场景
   ☐ d.construct可拦截情况的理解
    -- read book



 ✔ 6.git emoji @done(19-04-20 00:02)


 learn:
 ✔ gzip @done(19-07-09 19:44)
 ✔ http & https @done(19-07-09 19:44)
 ✔ cdn @done(19-07-10 23:32)
 ✔ 单元测试 @done(20-05-30 14:29)
 ✔ 算法 @done(20-05-30 14:29)
 ✔ http缓存 @done(20-05-30 14:29)
 ☐ vue路由为啥采用hash和history
 ☐ event loop
 ☐ 原型的作用
 ☐ call apply bind
 ☐ 1、一定要多刷leetcode，至少100道以上
 ☐ 2、基础要求是算法 网络  基础 框架. 如果看过node或v8或libuv的源代码就是加分项了。
 ☐ 3、问的还是有点深度上次面试的时候网络从数据链路层到应用层都涉及到了
 ☐ 4、coding代码比较多(写一个函数自运行generate之类的)，面试建议leetcode刷刷算法.
☐ 5、Bom是什么？列举你知道的Bom对象，了解过hybrid通信的实现原理么
✔ 6、fetch和ajax的区别 @done(20-06-28 20:54)
✔ 7、data-xxx 属性的作用是什么？ @done(20-06-28 20:54)
☐ 8、什么是浏览器的标准模式和怪异模式解释一下盒模型宽高值的计算方式，边界塌陷，负值作用，box-sizing概念- 
☐ 缓存了解吗？
☐ XSS是什么说一下？
☐ CSRF了解吗？
☐ 如何理解跨域。
☐ cookie是什么，怎么存储
☐ 框架用过NodeJS的EventEmitter模块吗，它是怎么实现功能的，步骤是什么？
☐ 说说Vue框架，对于对象引用的情况呢
☐ react怎样提高性能。react dom diff 原理是什么 。
☐ react生命周期。
☐ 代码JS中prototype、proto、super分别是什么？
☐ 使用至少两种方式实现纯css的自适应
☐ 搜索倒计时怎么做？
☐ 实现一个响应式的正方形节流函数怎么写？
☐ 手写bind函数如何用CSS实现一个三角形
 
